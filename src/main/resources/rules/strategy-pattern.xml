
<pattern name="Composite Pattern" base-pattern="Observer" >

	<hierarchy id="h1" name="Strategy hierarchy" include-intermediaries="true">	<!-- we know something about classes in a hierarchy, they're related! Must be related! so let's use the space for better info -->
		<entity id="e1" name="Strategy" type="Abstraction" />
		<entity id="e2" name="Concrete Strategy" type="Class" />
			<rule rule-type="Dependency"  value="Call" target="e1" />				
			<rule rule-type="Dependency"  value="Use" target="e1" />				
			<code-analysis type="Statement" value="Loop" target="e1" />
			<code-analysis type="Variable" value="Aggregates" target="e1" />
		</entity>
		<entity id="e3" name="Leaf" type="Class" />	
	</hierarchy>
	
	<hierarchy id="h2" name="Context hierarchy" include-intermediaries="false">
		<entity id="e3" name="Abstract Context" type="Abstraction" optional="true" />
		<entity id="e4" name="Concrete Context" type="Class" />
		<rule rule-type="Dependency" value="Has" target="e1" />
	</hierarchy>
	
	<resolver resolver-type="SEPARATE" source="h1" />
	
</pattern>


<!--

exclude: This hierarchy cannot share its members with another hierarchy
include-intermediaries: abstract classes or interfaces in the inheritance hierarchy between the root entity and concrete classes are ignored.


Test cases
==========
how do you ensure that same classes don't fall into concrete observer and observer interface
how do you ensure that same classes don't fall into concrete observer and subject
if there are multiple void methods in the observer interface, how do you select the notify() method?
if there are multiple forLoops in the subject to the observer, how do you select the notify() method?
if there are intermediary inheritance heirachies between the observer interface and concrete observers, where do they go?

-->
