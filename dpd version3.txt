dpd version 3
=============

Goals:
To allow representations of abstract relations like Specialize, realize, abstraction and concrete.
Hence, allow pattern variations. For a particular pattern, run all variations.
Allow efficient and scalable access and storage of files
Allow easy modification of code-snippets; pattern independent and language independent
Allow the application of rules as scores.
Allow executing of pattern specific code.
Allow easy classification of class types as realization, specialization, enum and abstraction.


ClassItem :-
	classPath      : String 
	classId		   : Int (first a string by renaming fileName)
	dependencyLine : String
	classType	   : ClassType
	
DependencyTypes :- Enum
	DependencyTypes(string[] dependencies)	: void
	getDependencyType(int id)				: DependencyType
	getIndexofDependency(DependencyType d) 	: int
	
DSMBrowser :-
	all methods are preserved but their implementation reversed.
	instead of returning class names, we return their indexes.
	add new method getClassPath(int classId) which returns the path.
	getClassesOfType would not be handled by the browser since this information cannot be determined affirmatively by the browser.
	getClassesOfAbsoluteType(AbsoluteType t) would not accept things like Abstraction and Specialize, another class that accesses the AST handles this.
	getClassesOfRelativeType(RelativeType t) would accept things like Abstraction, Specialization, Concrete.
	
	
infering classType:
- a class is an interface if it has Implement dependency
- a class is a concrete class if it has a Create dependency
- a class is an abstract class if it has an Extend "and" not Create dependency. This distinguishes from Interfaces and Classes that can be extended
	
dsmx format
===========
fileName :: classType :: DependencyLine

before reading dsm, see if objectAid file contains all this information.

Add logging information and nicely formatted output - use you logger! Add verbose flag to logger class
Add List<String> claims to entities. So filters, resolvers and ast-analyzers can add information about why they chose or didn't choose something
Put an Id in JClass and substitute fileName for classId.
Put an classPath var in JClass.
Create XDSMBrowser - that extends IBrowser.